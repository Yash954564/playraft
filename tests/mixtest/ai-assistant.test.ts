/**
 * AI-Assisted Test Example
 * This test demonstrates the use of OpenAI integration for test generation and analysis
 */
import { test, expect } from '@playwright/test';
import { aiHelper } from '../../ai/utils/ai.helper';
import { openAIService } from '../../ai/services/openai.service';
import { apiHelper } from '../../api/helpers/api.helper';
import { allureReporter } from '../../utils/reporting/allureReporter';
import { logger } from '../../utils/logger/logger';

// Define types for API responses
interface Post {
  id: number;
  title: string;
  body: string;
  userId: number;
}

test.describe('AI-Assisted Testing', () => {
  
  // Skip all tests if OpenAI is not enabled
  test.beforeAll(async () => {
    if (!openAIService.isEnabled()) {
      test.skip(true, 'OpenAI service is disabled - skipping AI-assisted tests');
    }
  });
  
  // Set up test metadata
  test.beforeEach(async ({}, testInfo) => {
    allureReporter.startTest(testInfo.title, 'AI-assisted testing examples', [
      { type: 'feature', value: 'AI Integration' },
      { type: 'story', value: 'OpenAI Integration' },
      { type: 'severity', value: 'normal' }
    ]);
  });
  
  // Clean up after tests
  test.afterEach(async ({}, testInfo) => {
    if (testInfo.status === 'failed') {
      allureReporter.endTest(testInfo.title, 'failed', testInfo.duration);
    } else if (testInfo.status === 'skipped') {
      allureReporter.endTest(testInfo.title, 'skipped', testInfo.duration);
    } else {
      allureReporter.endTest(testInfo.title, 'passed', testInfo.duration);
    }
  });
  
  test('should generate test data using AI', async () => {
    // Define post schema for test data generation
    const postSchema = `
      {
        "title": "string, post title between 10-50 characters",
        "body": "string, post content between 50-200 characters",
        "userId": "integer, between 1-10"
      }
    `;
    
    // Define constraints for test data
    const constraints = [
      'Title should be descriptive and relevant to a blog post',
      'Body should be coherent and contain at least one paragraph',
      'Each user ID should be different in the generated data'
    ];
    
    // Generate test data
    const testData = await aiHelper.generateTestData<Post>(postSchema, 3, constraints);
    
    // Verify test data was generated
    expect(testData).toBeDefined();
    expect(testData.length).toBe(3);
    
    // Verify each post has the required properties
    for (const post of testData) {
      expect(post.title).toBeDefined();
      expect(post.title.length).toBeGreaterThanOrEqual(10);
      expect(post.title.length).toBeLessThanOrEqual(50);
      
      expect(post.body).toBeDefined();
      expect(post.body.length).toBeGreaterThanOrEqual(50);
      expect(post.body.length).toBeLessThanOrEqual(200);
      
      expect(post.userId).toBeDefined();
      expect(post.userId).toBeGreaterThanOrEqual(1);
      expect(post.userId).toBeLessThanOrEqual(10);
    }
    
    // Verify user IDs are different
    const userIds = testData.map(post => post.userId);
    const uniqueUserIds = new Set(userIds);
    expect(uniqueUserIds.size).toBe(3);
    
    // Log test data
    logger.info('Generated test data for posts', testData);
  });
  
  test('should create, retrieve, and analyze post data', async () => {
    // Generate test data for a post
    const postData = await aiHelper.generateTestData<Post>('Post with title, body, and userId', 1);
    const post = postData[0] || {
      title: 'AI Generated Post',
      body: 'This is a test post generated by AI for testing purposes',
      userId: 1
    };
    
    // Create post
    const createResponse = await apiHelper.post<Post>('posts', post);
    expect(createResponse.status).toBe(201);
    expect(createResponse.data.id).toBeDefined();
    const postId = createResponse.data.id;
    
    // Get post
    const getResponse = await apiHelper.get<Post>(`posts/${postId}`);
    expect(getResponse.status).toBe(200);
    expect(getResponse.data.id).toBe(postId);
    expect(getResponse.data.title).toBe(post.title);
    
    // Generate analysis of the post content
    const analysisPrompt = `
      Analyze this post content and provide insights:
      
      Title: ${getResponse.data.title}
      Body: ${getResponse.data.body}
      
      Provide a brief analysis of:
      1. The post's clarity and coherence
      2. Potential improvements to the content
      3. SEO optimization suggestions
    `;
    
    const analysis = await openAIService.generateCompletion([
      { role: 'system', content: 'You are a content analyst. Provide brief, concise insights about the given post content.' },
      { role: 'user', content: analysisPrompt }
    ]);
    
    // Verify analysis was generated
    expect(analysis).toBeDefined();
    expect(analysis.choices[0].message.content).toBeDefined();
    expect(analysis.choices[0].message.content.length).toBeGreaterThan(50);
    
    // Log analysis
    logger.info('Content analysis', { 
      post: {
        id: postId,
        title: getResponse.data.title,
        body: getResponse.data.body
      },
      analysis: analysis.choices[0].message.content
    });
    
    // Add analysis to report
    allureReporter.addStep('Content Analysis', 'passed', {
      postId,
      analysis: analysis.choices[0].message.content
    });
  });
  
  test('should dynamically generate and execute tests', async () => {
    // Define test generation requirements
    const requirements = [
      'Verify GET /posts returns a list of posts',
      'Verify each post has id, title, body, and userId properties',
      'Verify GET /posts/1 returns a single post with id 1',
      'Verify POST /posts creates a new post',
      'Verify the response time is acceptable'
    ];
    
    // Generate test code
    const generatedCode = await aiHelper.generateTestCode({
      apiEndpoint: 'https://jsonplaceholder.typicode.com/posts',
      scenario: 'Testing the Posts API with dynamically generated tests',
      requirements,
      language: 'typescript',
      framework: 'playwright'
    });
    
    // Verify test code was generated
    expect(generatedCode).toBeDefined();
    expect(generatedCode.length).toBeGreaterThan(100);
    
    // Log generated code
    logger.info('Generated test code', { generatedCode });
    
    // Add generated code to report
    allureReporter.addStep('Generated Test Code', 'passed', { generatedCode });
    
    // Note: In a real implementation, we would save this code to a file and execute it
    // For this example, we'll simply verify it contains expected content
    expect(generatedCode).toContain('test(');
    expect(generatedCode).toContain('GET /posts');
    expect(generatedCode).toContain('POST /posts');
    expect(generatedCode).toContain('expect(');
  });
  
  test('should suggest improvements for an existing test', async () => {
    // Define a simple test that could be improved
    const simpleTest = `
      test('should get post by id', async () => {
        const response = await apiHelper.get('posts/1');
        expect(response.status).toBe(200);
        expect(response.data.id).toBe(1);
      });
    `;
    
    // Get improvement suggestions
    const improvements = await aiHelper.suggestTestImprovements(simpleTest);
    
    // Verify suggestions were generated
    expect(improvements).toBeDefined();
    expect(improvements.length).toBeGreaterThan(50);
    
    // Log suggestions
    logger.info('Test improvement suggestions', { improvements });
    
    // Add suggestions to report
    allureReporter.addStep('Test Improvement Suggestions', 'passed', { 
      originalTest: simpleTest,
      suggestions: improvements
    });
  });
});